The List ADT has the following operations already implemented in class:

void add(int num): Inserts num into the list.
int get(int pos): Returns the integer in the _pos_th position.
int remove(int num): Removes the first occurrence of num from the list and returns the position to which it was found.
 

Your task is to implement the following operations on a Dynamic Array List:

int removeAll(int num): Removes all occurrences of the element num. This returns the number of elements removed.
void dynamic_deduce(): This method shall be called to dynamically reduce the
 

Note that when the number of elements reach 3/4 of the capacity rounded down, you are to reallocate the array by reducing its size by 20% rounded down. Example, when the array has capacity 12 and after removing all the _num_s and it reaches less than or equal to 9 elements, it reduces the capacity by 20% (2.4, rounded down to 2). Therefore the new capacity shall be 10.

 

Note that this time, only do the reallocation once per method call. This is so that there will only be at most one call of the realloc for this method. Additionally, add the functionality to maintain a minimum capacity of 5.

 

For this problem, the dynamic_add and the remove method are given in order to guide you with the tasks above.

Sample Output 1

Op: a 10
Op: a 20
Op: a 30
Op: a 40
Op: a 50
Op: p
10 20 30 40 50
Op: R 30
Removed 1 element/s
Op: p
10 20 40 50 ?
Op: x
Exiting...
Sample Output 2

Op: a 10
Op: a 20
Op: a 10
Op: a 40
Op: p
10 20 10 40 ?
Op: R 10
Removed 2 element/s
Op: p
20 40 ? ? ?
Op: x
Exiting...
Sample Output 3

Op: a 15
Op: a 25
Op: a 40
Op: a 50
Op: a 25
Op: p
15 25 40 50 25
Op: R 25
Removed 2 element/s
Op: p
15 40 50 ? ?
Op: x
Exiting...
